// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/Zig.flex

/*
 * This file is part of ZigBrains.
 *
 * Copyright (C) 2023-2025 FalsePattern
 * All Rights Reserved
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * ZigBrains is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, only version 3 of the License.
 *
 * ZigBrains is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZigBrains. If not, see <https://www.gnu.org/licenses/>.
 */
package com.falsepattern.zigbrains.zig.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.falsepattern.zigbrains.zig.psi.ZigTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


class ZigFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STR_LIT = 2;
  public static final int STR_MULT_LINE = 4;
  public static final int CHAR_LIT = 6;
  public static final int ID_QUOT = 8;
  public static final int UNT_SQUOT = 10;
  public static final int UNT_DQUOT = 12;
  public static final int CDOC_CMT = 14;
  public static final int DOC_CMT = 16;
  public static final int LINE_CMT = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\2\0\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\6\25"+
    "\2\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\4\36\1\37\1\36\11\40\1\41\12\40\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\40\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\6\0\1\3\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\3\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\u01ff\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\1"+
    "\1\27\1\30\1\1\1\31\1\32\21\27\1\33\1\34"+
    "\1\35\1\36\2\37\1\40\1\37\1\41\1\42\2\43"+
    "\1\44\1\43\1\37\1\45\1\37\1\41\3\46\3\47"+
    "\1\41\1\50\1\41\1\51\1\41\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\6\0\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\15\27\1\111\1\27"+
    "\1\112\4\27\1\113\16\27\1\114\1\115\2\0\1\40"+
    "\4\0\1\44\2\0\1\45\6\0\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\0"+
    "\1\127\3\20\1\130\1\131\1\132\3\27\1\133\1\27"+
    "\1\134\15\27\1\135\10\27\1\136\7\27\1\137\3\27"+
    "\1\140\2\27\1\41\2\0\1\141\16\27\1\142\1\143"+
    "\21\27\1\144\6\27\1\127\1\27\1\145\3\27\1\146"+
    "\1\147\1\150\1\27\1\151\1\27\1\152\1\27\1\153"+
    "\1\27\1\154\20\27\1\155\3\27\1\156\10\27\1\157"+
    "\1\160\1\161\4\27\1\162\1\163\1\164\1\165\1\166"+
    "\1\167\1\27\1\170\7\27\1\171\5\27\1\172\2\27"+
    "\1\173\6\27\1\174\1\175\1\176\1\177\1\200\1\27"+
    "\1\201\4\27\1\202\1\203\1\204\1\27\1\205\7\27"+
    "\1\206\1\207\1\210\3\27\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[395];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u02a8\0\u0374\0\u03b8"+
    "\0\u02a8\0\u02a8\0\u02a8\0\u03fc\0\u0440\0\u02a8\0\u0484\0\u04c8"+
    "\0\u050c\0\u0550\0\u0594\0\u02a8\0\u02a8\0\u05d8\0\u061c\0\u0660"+
    "\0\u02a8\0\u06a4\0\u06e8\0\u02a8\0\u072c\0\u02a8\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4"+
    "\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4"+
    "\0\u02a8\0\u0c38\0\u02a8\0\u02a8\0\u0c7c\0\u02a8\0\u02a8\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u02a8\0\u02a8\0\u0dd0\0\u0e14\0\u02a8"+
    "\0\u0e58\0\u0e9c\0\u02a8\0\u0e9c\0\u0ee0\0\u02a8\0\u0e9c\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u02a8\0\u02a8"+
    "\0\u02a8\0\u1100\0\u02a8\0\u02a8\0\u1144\0\u1188\0\u02a8\0\u02a8"+
    "\0\u11cc\0\u1210\0\u02a8\0\u02a8\0\u1254\0\u02a8\0\u1298\0\u02a8"+
    "\0\u12dc\0\u02a8\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u14fc\0\u02a8\0\u1540"+
    "\0\u02a8\0\u02a8\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u06e8"+
    "\0\u18f8\0\u06e8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u02a8\0\u02a8\0\u0c7c"+
    "\0\u0cc0\0\u0c7c\0\u0d48\0\u1e48\0\u0d8c\0\u0dd0\0\u0d8c\0\u0e14"+
    "\0\u0e58\0\u0e14\0\u0fac\0\u1e8c\0\u1034\0\u1ed0\0\u10bc\0\u1f14"+
    "\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u02a8"+
    "\0\u02a8\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u02a8"+
    "\0\u20f0\0\u02a8\0\u2134\0\u2178\0\u21bc\0\u06e8\0\u2200\0\u06e8"+
    "\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420"+
    "\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u06e8\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u06e8\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u06e8\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u06e8\0\u2a80\0\u2ac4\0\u02a8\0\u2b08\0\u2b4c"+
    "\0\u02a8\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u06e8"+
    "\0\u06e8\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u06e8\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u3564\0\u35a8\0\u06e8\0\u35ec\0\u3630\0\u3674\0\u06e8"+
    "\0\u06e8\0\u06e8\0\u36b8\0\u06e8\0\u36fc\0\u06e8\0\u3740\0\u06e8"+
    "\0\u3784\0\u06e8\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u06e8\0\u3c08\0\u3c4c\0\u3c90\0\u06e8\0\u3cd4"+
    "\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u06e8"+
    "\0\u06e8\0\u06e8\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u06e8\0\u06e8"+
    "\0\u06e8\0\u06e8\0\u06e8\0\u06e8\0\u4004\0\u06e8\0\u4048\0\u408c"+
    "\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u06e8\0\u4224\0\u4268"+
    "\0\u42ac\0\u42f0\0\u4334\0\u06e8\0\u4378\0\u43bc\0\u06e8\0\u4400"+
    "\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u06e8\0\u06e8\0\u06e8"+
    "\0\u06e8\0\u06e8\0\u4598\0\u06e8\0\u45dc\0\u4620\0\u4664\0\u46a8"+
    "\0\u06e8\0\u06e8\0\u06e8\0\u46ec\0\u06e8\0\u4730\0\u4774\0\u47b8"+
    "\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u06e8\0\u06e8\0\u06e8\0\u490c"+
    "\0\u4950\0\u4994\0\u06e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[395];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\5\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\4\43\1\44\1\45\1\46\1\47\1\43\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\2\43\1\56\1\43\1\57"+
    "\1\43\1\60\1\61\1\62\1\43\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\3\43\1\71\1\72\1\73\1\74"+
    "\2\75\1\76\4\75\1\77\33\75\1\100\40\75\2\101"+
    "\1\102\101\101\2\103\1\104\7\103\1\105\30\103\1\106"+
    "\40\103\2\107\1\76\4\107\1\110\33\107\1\111\40\107"+
    "\2\112\1\113\1\114\1\115\101\112\1\116\1\117\1\120"+
    "\77\112\2\121\1\122\101\121\2\123\1\124\101\123\2\125"+
    "\1\126\101\125\105\0\5\14\130\0\1\127\103\0\1\130"+
    "\103\0\1\131\61\0\1\132\4\0\1\133\14\0\1\134"+
    "\46\0\1\135\12\0\1\136\5\0\1\137\13\0\1\140"+
    "\46\0\1\141\12\0\1\142\21\0\1\143\1\144\45\0"+
    "\1\145\17\0\1\146\3\0\1\147\12\0\1\150\71\0"+
    "\1\151\7\0\1\152\72\0\1\153\1\0\4\33\10\0"+
    "\1\154\6\0\1\155\1\0\1\156\2\0\1\154\10\0"+
    "\1\157\10\0\1\160\27\0\1\153\1\0\4\33\10\0"+
    "\1\154\6\0\1\155\4\0\1\154\61\0\1\161\1\162"+
    "\103\0\1\163\1\164\102\0\1\165\1\166\57\0\1\167"+
    "\26\0\4\170\4\0\32\170\27\0\4\43\7\0\4\43"+
    "\4\0\32\43\47\0\1\171\72\0\1\172\74\0\4\43"+
    "\7\0\4\43\4\0\4\43\1\173\6\43\1\174\1\43"+
    "\1\175\4\43\1\176\3\43\1\177\3\43\27\0\4\43"+
    "\7\0\4\43\4\0\21\43\1\200\10\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\201\14\43\1\202\13\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\203\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\13\43\1\204\1\43"+
    "\1\205\3\43\1\206\5\43\1\207\2\43\27\0\4\43"+
    "\7\0\4\43\4\0\15\43\1\210\1\211\13\43\27\0"+
    "\4\43\7\0\4\43\4\0\6\43\1\212\6\43\1\213"+
    "\14\43\27\0\4\43\7\0\4\43\4\0\11\43\1\214"+
    "\20\43\27\0\4\43\7\0\4\43\4\0\16\43\1\215"+
    "\13\43\27\0\4\43\7\0\4\43\4\0\17\43\1\216"+
    "\1\43\1\217\10\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\220\22\43\1\221\5\43\27\0\4\43\7\0"+
    "\4\43\4\0\5\43\1\222\24\43\27\0\4\43\7\0"+
    "\4\43\4\0\23\43\1\223\1\224\1\43\1\225\3\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\226\2\43"+
    "\1\227\10\43\1\230\10\43\27\0\4\43\7\0\4\43"+
    "\4\0\15\43\1\231\4\43\1\232\7\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\233\14\43\1\234\13\43"+
    "\27\0\4\43\7\0\4\43\4\0\10\43\1\235\21\43"+
    "\36\0\1\236\46\0\1\237\2\0\2\240\1\0\4\240"+
    "\1\77\33\240\1\241\42\240\1\0\4\240\1\242\33\240"+
    "\1\241\40\240\2\101\1\243\101\101\2\0\1\243\2\0"+
    "\1\243\35\0\1\244\40\0\2\245\1\0\7\245\1\105"+
    "\30\245\1\246\42\245\1\0\7\245\1\247\30\245\1\246"+
    "\40\245\2\250\1\0\4\250\1\110\33\250\1\251\42\250"+
    "\1\0\4\250\1\252\33\250\1\251\40\250\2\112\1\0"+
    "\103\112\1\113\103\112\1\116\101\112\2\121\1\253\101\121"+
    "\2\0\1\253\2\0\1\253\14\0\1\254\61\0\2\123"+
    "\1\255\101\123\2\0\1\255\2\0\1\255\14\0\1\256"+
    "\61\0\2\125\1\257\101\125\2\0\1\257\2\0\1\257"+
    "\14\0\1\260\113\0\1\261\103\0\1\262\103\0\1\263"+
    "\103\0\1\264\103\0\1\265\103\0\1\266\72\0\1\267"+
    "\70\0\1\270\13\0\1\271\104\0\4\272\73\0\1\273"+
    "\1\0\1\273\2\0\4\274\100\0\4\33\100\0\2\275"+
    "\102\0\3\276\101\0\4\277\7\0\2\277\7\0\6\277"+
    "\61\0\1\300\46\0\1\301\34\0\1\302\74\0\4\170"+
    "\7\0\4\170\4\0\32\170\27\0\4\43\7\0\4\43"+
    "\4\0\4\43\1\303\25\43\27\0\4\43\7\0\4\43"+
    "\4\0\11\43\1\304\1\43\1\305\16\43\27\0\4\43"+
    "\7\0\4\43\4\0\4\43\1\306\23\43\1\307\1\43"+
    "\27\0\4\43\7\0\4\43\4\0\14\43\1\310\13\43"+
    "\1\311\1\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\312\30\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\313\24\43\27\0\4\43\7\0\4\43\4\0\13\43"+
    "\1\314\7\43\1\315\6\43\27\0\4\43\7\0\4\43"+
    "\4\0\14\43\1\316\1\317\14\43\27\0\4\43\7\0"+
    "\4\43\4\0\6\43\1\320\23\43\27\0\4\43\7\0"+
    "\4\43\4\0\22\43\1\321\7\43\27\0\4\43\7\0"+
    "\4\43\4\0\24\43\1\322\5\43\27\0\4\43\7\0"+
    "\4\43\4\0\21\43\1\323\10\43\27\0\4\43\7\0"+
    "\4\43\4\0\17\43\1\324\3\43\1\325\6\43\27\0"+
    "\4\43\7\0\4\43\4\0\21\43\1\326\10\43\27\0"+
    "\4\43\7\0\4\43\4\0\13\43\1\327\16\43\27\0"+
    "\4\43\7\0\4\43\4\0\15\43\1\330\14\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\331\7\43\1\332"+
    "\10\43\1\333\7\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\334\30\43\27\0\4\43\7\0\4\43\4\0"+
    "\5\43\1\335\24\43\27\0\4\43\7\0\4\43\4\0"+
    "\3\43\1\336\26\43\27\0\4\43\7\0\4\43\4\0"+
    "\2\43\1\337\27\43\27\0\4\43\7\0\4\43\4\0"+
    "\22\43\1\340\1\341\6\43\27\0\4\43\7\0\4\43"+
    "\4\0\21\43\1\342\10\43\27\0\4\43\7\0\4\43"+
    "\4\0\22\43\1\343\7\43\27\0\4\43\7\0\4\43"+
    "\4\0\11\43\1\344\20\43\27\0\4\43\7\0\4\43"+
    "\4\0\22\43\1\345\7\43\27\0\4\43\7\0\4\43"+
    "\4\0\21\43\1\346\10\43\27\0\4\43\7\0\4\43"+
    "\4\0\30\43\1\347\1\43\27\0\4\43\7\0\4\43"+
    "\4\0\11\43\1\350\7\43\1\351\10\43\27\0\4\43"+
    "\7\0\4\43\4\0\11\43\1\352\20\43\27\0\4\43"+
    "\7\0\4\43\4\0\21\43\1\353\10\43\27\0\4\43"+
    "\7\0\4\43\4\0\13\43\1\354\16\43\27\0\4\43"+
    "\7\0\4\43\4\0\11\43\1\355\20\43\47\0\1\356"+
    "\62\0\1\357\103\0\1\260\103\0\1\356\104\0\4\272"+
    "\10\0\1\154\6\0\1\153\4\0\1\154\53\0\4\274"+
    "\100\0\4\274\17\0\1\273\60\0\2\275\21\0\1\156"+
    "\60\0\3\276\20\0\1\157\56\0\1\360\1\0\4\277"+
    "\7\0\2\277\1\0\1\154\4\0\1\160\6\277\10\0"+
    "\1\154\50\0\1\361\74\0\4\43\7\0\4\43\4\0"+
    "\21\43\1\362\10\43\27\0\4\43\7\0\4\43\4\0"+
    "\7\43\1\363\22\43\27\0\4\43\7\0\4\43\4\0"+
    "\16\43\1\364\13\43\27\0\4\43\7\0\4\43\4\0"+
    "\6\43\1\365\14\43\1\366\6\43\27\0\4\43\7\0"+
    "\4\43\4\0\15\43\1\367\14\43\27\0\4\43\7\0"+
    "\4\43\4\0\11\43\1\370\20\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\371\30\43\27\0\4\43\7\0"+
    "\4\43\4\0\13\43\1\372\16\43\27\0\4\43\7\0"+
    "\4\43\4\0\3\43\1\373\26\43\27\0\4\43\7\0"+
    "\4\43\4\0\17\43\1\374\12\43\27\0\4\43\7\0"+
    "\4\43\4\0\22\43\1\375\1\376\6\43\27\0\4\43"+
    "\7\0\4\43\4\0\5\43\1\377\24\43\27\0\4\43"+
    "\7\0\4\43\4\0\5\43\1\u0100\24\43\27\0\4\43"+
    "\7\0\4\43\4\0\14\43\1\u0101\15\43\27\0\4\43"+
    "\7\0\4\43\4\0\4\43\1\u0102\11\43\1\u0103\13\43"+
    "\27\0\4\43\7\0\4\43\4\0\16\43\1\u0104\13\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u0105\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\11\43\1\u0106\20\43"+
    "\27\0\4\43\7\0\4\43\4\0\12\43\1\u0107\17\43"+
    "\27\0\4\43\7\0\4\43\4\0\13\43\1\u0108\16\43"+
    "\27\0\4\43\7\0\4\43\4\0\15\43\1\u0109\14\43"+
    "\27\0\4\43\7\0\4\43\4\0\24\43\1\u010a\5\43"+
    "\27\0\4\43\7\0\4\43\4\0\20\43\1\u010b\11\43"+
    "\27\0\4\43\7\0\4\43\4\0\13\43\1\u010c\16\43"+
    "\27\0\4\43\7\0\4\43\4\0\12\43\1\u010d\17\43"+
    "\27\0\4\43\7\0\4\43\4\0\24\43\1\u010e\5\43"+
    "\27\0\4\43\7\0\4\43\4\0\24\43\1\u010f\5\43"+
    "\27\0\4\43\7\0\4\43\4\0\24\43\1\u0110\5\43"+
    "\27\0\4\43\7\0\4\43\4\0\17\43\1\u0111\12\43"+
    "\27\0\4\43\7\0\4\43\4\0\23\43\1\u0112\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\23\43\1\u0113\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u0114\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\16\43\1\u0115\13\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u0116\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\15\43\1\u0117\14\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\u0118\30\43"+
    "\27\0\4\43\7\0\4\43\4\0\13\43\1\u0119\16\43"+
    "\12\0\1\356\120\0\4\u011a\7\0\2\u011a\7\0\6\u011a"+
    "\52\0\4\43\7\0\4\43\4\0\22\43\1\u011b\7\43"+
    "\27\0\4\43\7\0\4\43\4\0\15\43\1\u011c\14\43"+
    "\27\0\4\43\7\0\4\43\4\0\26\43\1\u011d\3\43"+
    "\27\0\4\43\7\0\4\43\4\0\21\43\1\u011e\10\43"+
    "\27\0\4\43\7\0\4\43\4\0\30\43\1\u011f\1\43"+
    "\27\0\4\43\7\0\4\43\4\0\3\43\1\u0120\26\43"+
    "\27\0\4\43\7\0\4\43\4\0\23\43\1\u0121\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\12\43\1\u0122\17\43"+
    "\27\0\4\43\7\0\4\43\4\0\3\43\1\u0123\26\43"+
    "\27\0\4\43\7\0\4\43\4\0\10\43\1\u0124\21\43"+
    "\27\0\4\43\7\0\4\43\4\0\23\43\1\u0125\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\23\43\1\u0126\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\11\43\1\u0127\20\43"+
    "\27\0\4\43\7\0\4\43\4\0\21\43\1\u0128\10\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u0129\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\21\43\1\u012a\10\43"+
    "\27\0\4\43\7\0\4\43\4\0\21\43\1\u012b\10\43"+
    "\27\0\4\43\7\0\4\43\4\0\21\43\1\u012c\10\43"+
    "\27\0\4\43\7\0\4\43\4\0\15\43\1\u012d\14\43"+
    "\27\0\4\43\7\0\4\43\4\0\22\43\1\u012e\7\43"+
    "\27\0\4\43\7\0\4\43\4\0\11\43\1\u012f\20\43"+
    "\27\0\4\43\7\0\4\43\4\0\13\43\1\u0130\16\43"+
    "\27\0\4\43\7\0\4\43\4\0\22\43\1\u0131\7\43"+
    "\27\0\4\43\7\0\4\43\4\0\24\43\1\u0132\5\43"+
    "\27\0\4\43\7\0\4\43\4\0\22\43\1\u0133\7\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u0134\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\14\43\1\u0135\15\43"+
    "\27\0\4\43\7\0\4\43\4\0\21\43\1\u0136\10\43"+
    "\27\0\4\43\7\0\4\43\4\0\3\43\1\u0137\26\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u0138\24\43"+
    "\27\0\4\43\7\0\4\43\4\0\3\43\1\u0139\26\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\u013a\30\43"+
    "\27\0\4\43\7\0\4\43\4\0\15\43\1\u013b\14\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\u013c\30\43"+
    "\27\0\4\43\7\0\4\43\4\0\7\43\1\u013d\22\43"+
    "\27\0\4\43\7\0\4\43\4\0\23\43\1\u013e\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\5\43\1\u013f\24\43"+
    "\27\0\4\u011a\7\0\2\u011a\1\0\1\154\4\0\1\360"+
    "\6\u011a\10\0\1\154\41\0\4\43\7\0\4\43\4\0"+
    "\17\43\1\u0140\12\43\27\0\4\43\7\0\4\43\4\0"+
    "\31\43\1\u0141\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u0142\30\43\27\0\4\43\7\0\4\43\4\0\17\43"+
    "\1\u0143\12\43\27\0\4\43\7\0\4\43\4\0\16\43"+
    "\1\u0144\13\43\27\0\4\43\7\0\4\43\4\0\11\43"+
    "\1\u0145\20\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0146\14\43\27\0\4\43\7\0\4\43\4\0\6\43"+
    "\1\u0147\23\43\27\0\4\43\7\0\4\43\4\0\23\43"+
    "\1\u0148\6\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0149\14\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u014a\24\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u014b\24\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u014c\30\43\27\0\4\43\7\0\4\43\4\0\11\43"+
    "\1\u014d\20\43\27\0\4\43\7\0\4\43\4\0\17\43"+
    "\1\u014e\12\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u014f\24\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0150\24\43\27\0\4\43\7\0\4\43\4\0\4\43"+
    "\1\u0151\25\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0152\24\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0153\14\43\27\0\4\43\7\0\4\43\4\0\23\43"+
    "\1\u0154\6\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0155\14\43\27\0\4\43\7\0\4\43\4\0\10\43"+
    "\1\u0156\21\43\27\0\4\43\7\0\4\43\4\0\4\43"+
    "\1\u0157\25\43\27\0\4\43\7\0\4\43\4\0\3\43"+
    "\1\u0158\26\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0159\14\43\27\0\4\43\7\0\4\43\4\0\11\43"+
    "\1\u015a\20\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u015b\30\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u015c\24\43\27\0\4\43\7\0\4\43\4\0\14\43"+
    "\1\u015d\15\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u015e\24\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u015f\14\43\27\0\4\43\7\0\4\43\4\0\14\43"+
    "\1\u0160\15\43\27\0\4\43\7\0\4\43\4\0\24\43"+
    "\1\u0161\5\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0162\24\43\27\0\4\43\7\0\4\43\4\0\3\43"+
    "\1\u0163\26\43\27\0\4\43\7\0\4\43\4\0\22\43"+
    "\1\u0164\7\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0165\14\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0166\24\43\27\0\4\43\7\0\4\43\4\0\4\43"+
    "\1\u0167\25\43\27\0\4\43\7\0\4\43\4\0\13\43"+
    "\1\u0168\16\43\27\0\4\43\7\0\4\43\4\0\10\43"+
    "\1\u0169\21\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u016a\30\43\27\0\4\43\7\0\4\43\4\0\13\43"+
    "\1\u016b\16\43\27\0\4\43\7\0\4\43\4\0\3\43"+
    "\1\u016c\26\43\27\0\4\43\7\0\4\43\4\0\21\43"+
    "\1\u016d\10\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u016e\24\43\27\0\4\43\7\0\4\43\4\0\25\43"+
    "\1\u016f\4\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0170\24\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0171\24\43\27\0\4\43\7\0\4\43\4\0\21\43"+
    "\1\u0172\10\43\27\0\4\43\7\0\4\43\4\0\23\43"+
    "\1\u0173\6\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0174\24\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0175\14\43\27\0\4\43\7\0\4\43\4\0\16\43"+
    "\1\u0176\13\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u0177\30\43\27\0\4\43\7\0\4\43\4\0\14\43"+
    "\1\u0178\15\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0179\24\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u017a\24\43\27\0\4\43\7\0\4\43\4\0\16\43"+
    "\1\u017b\13\43\27\0\4\43\7\0\4\43\4\0\11\43"+
    "\1\u017c\20\43\27\0\4\43\7\0\4\43\4\0\4\43"+
    "\1\u017d\25\43\27\0\4\43\7\0\4\43\4\0\3\43"+
    "\1\u017e\26\43\27\0\4\43\7\0\4\43\4\0\2\43"+
    "\1\u017f\27\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0180\24\43\27\0\4\43\7\0\4\43\4\0\16\43"+
    "\1\u0181\13\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u0182\30\43\27\0\4\43\7\0\4\43\4\0\13\43"+
    "\1\u0183\16\43\27\0\4\43\7\0\4\43\4\0\22\43"+
    "\1\u0184\7\43\27\0\4\43\7\0\4\43\4\0\15\43"+
    "\1\u0185\14\43\27\0\4\43\7\0\4\43\4\0\13\43"+
    "\1\u0186\16\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u0187\24\43\27\0\4\43\7\0\4\43\4\0\17\43"+
    "\1\u0188\12\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\u0189\30\43\27\0\4\43\7\0\4\43\4\0\3\43"+
    "\1\u018a\26\43\27\0\4\43\7\0\4\43\4\0\5\43"+
    "\1\u018b\24\43\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18904];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\2\1\1\11\2\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\1\11\2\1\1\11\1\1\1\11"+
    "\22\1\1\11\1\1\2\11\1\1\2\11\4\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\10\1\3\11"+
    "\1\1\2\11\2\1\2\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\6\0\1\1\4\11\1\1"+
    "\1\11\1\1\2\11\43\1\2\11\2\0\1\1\4\0"+
    "\1\1\2\0\1\1\6\0\11\11\1\1\1\0\4\1"+
    "\1\11\1\1\1\11\53\1\1\11\2\0\1\11\232\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[395];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ZigFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STR_LIT: {
              yybegin(YYINITIAL); return BAD_DQUOT;
            }  // fall though
            case 396: break;
            case STR_MULT_LINE: {
              yybegin(YYINITIAL); return STRING_LITERAL_MULTI;
            }  // fall though
            case 397: break;
            case CHAR_LIT: {
              yybegin(YYINITIAL); return BAD_SQUOT;
            }  // fall though
            case 398: break;
            case ID_QUOT: {
              yybegin(YYINITIAL); return BAD_DQUOT;
            }  // fall though
            case 399: break;
            case UNT_SQUOT: {
              yybegin(YYINITIAL); return BAD_SQUOT;
            }  // fall though
            case 400: break;
            case UNT_DQUOT: {
              yybegin(YYINITIAL); return BAD_DQUOT;
            }  // fall though
            case 401: break;
            case CDOC_CMT: {
              yybegin(YYINITIAL); return CONTAINER_DOC_COMMENT;
            }  // fall though
            case 402: break;
            case DOC_CMT: {
              yybegin(YYINITIAL); return DOC_COMMENT;
            }  // fall though
            case 403: break;
            case LINE_CMT: {
              yybegin(YYINITIAL); return LINE_COMMENT;
            }  // fall though
            case 404: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 138: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 139: break;
          case 3:
            { return EXCLAMATIONMARK;
            }
          // fall through
          case 140: break;
          case 4:
            { yybegin(STR_LIT);
            }
          // fall through
          case 141: break;
          case 5:
            { return PERCENT;
            }
          // fall through
          case 142: break;
          case 6:
            { return AMPERSAND;
            }
          // fall through
          case 143: break;
          case 7:
            { yybegin(CHAR_LIT);
            }
          // fall through
          case 144: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 145: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 146: break;
          case 10:
            { return ASTERISK;
            }
          // fall through
          case 147: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 148: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 149: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 150: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 151: break;
          case 15:
            { return SLASH;
            }
          // fall through
          case 152: break;
          case 16:
            { return INTEGER;
            }
          // fall through
          case 153: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 154: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 155: break;
          case 19:
            { return LARROW;
            }
          // fall through
          case 156: break;
          case 20:
            { return EQUAL;
            }
          // fall through
          case 157: break;
          case 21:
            { return RARROW;
            }
          // fall through
          case 158: break;
          case 22:
            { return QUESTIONMARK;
            }
          // fall through
          case 159: break;
          case 23:
            { return IDENTIFIER;
            }
          // fall through
          case 160: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 161: break;
          case 25:
            { return RBRACKET;
            }
          // fall through
          case 162: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 163: break;
          case 27:
            { return LBRACE;
            }
          // fall through
          case 164: break;
          case 28:
            { return PIPE;
            }
          // fall through
          case 165: break;
          case 29:
            { return RBRACE;
            }
          // fall through
          case 166: break;
          case 30:
            { return TILDE;
            }
          // fall through
          case 167: break;
          case 31:
            { yypushback(1); yybegin(UNT_DQUOT);
            }
          // fall through
          case 168: break;
          case 32:
            { yybegin(YYINITIAL); return STRING_LITERAL_SINGLE;
            }
          // fall through
          case 169: break;
          case 33:
            { 
            }
          // fall through
          case 170: break;
          case 34:
            { yybegin(YYINITIAL); return STRING_LITERAL_MULTI;
            }
          // fall through
          case 171: break;
          case 35:
            { yypushback(1); yybegin(UNT_SQUOT);
            }
          // fall through
          case 172: break;
          case 36:
            { yybegin(YYINITIAL); return CHAR_LITERAL;
            }
          // fall through
          case 173: break;
          case 37:
            { yybegin(YYINITIAL); return IDENTIFIER;
            }
          // fall through
          case 174: break;
          case 38:
            { yybegin(YYINITIAL); return BAD_SQUOT;
            }
          // fall through
          case 175: break;
          case 39:
            { yybegin(YYINITIAL); return BAD_DQUOT;
            }
          // fall through
          case 176: break;
          case 40:
            { yybegin(YYINITIAL); return CONTAINER_DOC_COMMENT;
            }
          // fall through
          case 177: break;
          case 41:
            { yybegin(YYINITIAL); return DOC_COMMENT;
            }
          // fall through
          case 178: break;
          case 42:
            { yybegin(YYINITIAL); return LINE_COMMENT;
            }
          // fall through
          case 179: break;
          case 43:
            { return EXCLAMATIONMARKEQUAL;
            }
          // fall through
          case 180: break;
          case 44:
            { return PERCENTEQUAL;
            }
          // fall through
          case 181: break;
          case 45:
            { return AMPERSANDEQUAL;
            }
          // fall through
          case 182: break;
          case 46:
            { return ASTERISKPERCENT;
            }
          // fall through
          case 183: break;
          case 47:
            { return ASTERISK2;
            }
          // fall through
          case 184: break;
          case 48:
            { return ASTERISKEQUAL;
            }
          // fall through
          case 185: break;
          case 49:
            { return ASTERISKPIPE;
            }
          // fall through
          case 186: break;
          case 50:
            { return PLUSPERCENT;
            }
          // fall through
          case 187: break;
          case 51:
            { return PLUS2;
            }
          // fall through
          case 188: break;
          case 52:
            { return PLUSEQUAL;
            }
          // fall through
          case 189: break;
          case 53:
            { return PLUSPIPE;
            }
          // fall through
          case 190: break;
          case 54:
            { return MINUSPERCENT;
            }
          // fall through
          case 191: break;
          case 55:
            { return MINUSEQUAL;
            }
          // fall through
          case 192: break;
          case 56:
            { return MINUSRARROW;
            }
          // fall through
          case 193: break;
          case 57:
            { return MINUSPIPE;
            }
          // fall through
          case 194: break;
          case 58:
            { return DOTASTERISK;
            }
          // fall through
          case 195: break;
          case 59:
            { return DOT2;
            }
          // fall through
          case 196: break;
          case 60:
            { return DOTQUESTIONMARK;
            }
          // fall through
          case 197: break;
          case 61:
            { yybegin(LINE_CMT);
            }
          // fall through
          case 198: break;
          case 62:
            { return SLASHEQUAL;
            }
          // fall through
          case 199: break;
          case 63:
            { return LARROW2;
            }
          // fall through
          case 200: break;
          case 64:
            { return LARROWEQUAL;
            }
          // fall through
          case 201: break;
          case 65:
            { return EQUALEQUAL;
            }
          // fall through
          case 202: break;
          case 66:
            { return EQUALRARROW;
            }
          // fall through
          case 203: break;
          case 67:
            { return RARROWEQUAL;
            }
          // fall through
          case 204: break;
          case 68:
            { return RARROW2;
            }
          // fall through
          case 205: break;
          case 69:
            { yybegin(ID_QUOT);
            }
          // fall through
          case 206: break;
          case 70:
            { return BUILTINIDENTIFIER;
            }
          // fall through
          case 207: break;
          case 71:
            { yybegin(STR_MULT_LINE);
            }
          // fall through
          case 208: break;
          case 72:
            { return CARETEQUAL;
            }
          // fall through
          case 209: break;
          case 73:
            { return KEYWORD_FN;
            }
          // fall through
          case 210: break;
          case 74:
            { return KEYWORD_IF;
            }
          // fall through
          case 211: break;
          case 75:
            { return KEYWORD_OR;
            }
          // fall through
          case 212: break;
          case 76:
            { return PIPEEQUAL;
            }
          // fall through
          case 213: break;
          case 77:
            { return PIPE2;
            }
          // fall through
          case 214: break;
          case 78:
            { return ASTERISKPERCENTEQUAL;
            }
          // fall through
          case 215: break;
          case 79:
            { return ASTERISKPIPEEQUAL;
            }
          // fall through
          case 216: break;
          case 80:
            { return PLUSPERCENTEQUAL;
            }
          // fall through
          case 217: break;
          case 81:
            { return PLUSPIPEEQUAL;
            }
          // fall through
          case 218: break;
          case 82:
            { return MINUSPERCENTEQUAL;
            }
          // fall through
          case 219: break;
          case 83:
            { return MINUSPIPEEQUAL;
            }
          // fall through
          case 220: break;
          case 84:
            { return DOT3;
            }
          // fall through
          case 221: break;
          case 85:
            { yybegin(CDOC_CMT);
            }
          // fall through
          case 222: break;
          case 86:
            { yybegin(DOC_CMT);
            }
          // fall through
          case 223: break;
          case 87:
            { return FLOAT;
            }
          // fall through
          case 224: break;
          case 88:
            { return LARROW2EQUAL;
            }
          // fall through
          case 225: break;
          case 89:
            { return LARROW2PIPE;
            }
          // fall through
          case 226: break;
          case 90:
            { return RARROW2EQUAL;
            }
          // fall through
          case 227: break;
          case 91:
            { return KEYWORD_AND;
            }
          // fall through
          case 228: break;
          case 92:
            { return KEYWORD_ASM;
            }
          // fall through
          case 229: break;
          case 93:
            { return KEYWORD_FOR;
            }
          // fall through
          case 230: break;
          case 94:
            { return KEYWORD_PUB;
            }
          // fall through
          case 231: break;
          case 95:
            { return KEYWORD_TRY;
            }
          // fall through
          case 232: break;
          case 96:
            { return KEYWORD_VAR;
            }
          // fall through
          case 233: break;
          case 97:
            { return LARROW2PIPEEQUAL;
            }
          // fall through
          case 234: break;
          case 98:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 235: break;
          case 99:
            { return KEYWORD_ENUM;
            }
          // fall through
          case 236: break;
          case 100:
            { return KEYWORD_TEST;
            }
          // fall through
          case 237: break;
          case 101:
            { return KEYWORD_ALIGN;
            }
          // fall through
          case 238: break;
          case 102:
            { return KEYWORD_ASYNC;
            }
          // fall through
          case 239: break;
          case 103:
            { return KEYWORD_AWAIT;
            }
          // fall through
          case 240: break;
          case 104:
            { return KEYWORD_BREAK;
            }
          // fall through
          case 241: break;
          case 105:
            { return KEYWORD_CATCH;
            }
          // fall through
          case 242: break;
          case 106:
            { return KEYWORD_CONST;
            }
          // fall through
          case 243: break;
          case 107:
            { return KEYWORD_DEFER;
            }
          // fall through
          case 244: break;
          case 108:
            { return KEYWORD_ERROR;
            }
          // fall through
          case 245: break;
          case 109:
            { return KEYWORD_UNION;
            }
          // fall through
          case 246: break;
          case 110:
            { return KEYWORD_WHILE;
            }
          // fall through
          case 247: break;
          case 111:
            { return KEYWORD_EXPORT;
            }
          // fall through
          case 248: break;
          case 112:
            { return KEYWORD_EXTERN;
            }
          // fall through
          case 249: break;
          case 113:
            { return KEYWORD_INLINE;
            }
          // fall through
          case 250: break;
          case 114:
            { return KEYWORD_OPAQUE;
            }
          // fall through
          case 251: break;
          case 115:
            { return KEYWORD_ORELSE;
            }
          // fall through
          case 252: break;
          case 116:
            { return KEYWORD_PACKED;
            }
          // fall through
          case 253: break;
          case 117:
            { return KEYWORD_RESUME;
            }
          // fall through
          case 254: break;
          case 118:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 255: break;
          case 119:
            { return KEYWORD_STRUCT;
            }
          // fall through
          case 256: break;
          case 120:
            { return KEYWORD_SWITCH;
            }
          // fall through
          case 257: break;
          case 121:
            { return KEYWORD_ANYTYPE;
            }
          // fall through
          case 258: break;
          case 122:
            { return KEYWORD_NOALIAS;
            }
          // fall through
          case 259: break;
          case 123:
            { return KEYWORD_SUSPEND;
            }
          // fall through
          case 260: break;
          case 124:
            { return KEYWORD_ANYFRAME;
            }
          // fall through
          case 261: break;
          case 125:
            { return KEYWORD_CALLCONV;
            }
          // fall through
          case 262: break;
          case 126:
            { return KEYWORD_COMPTIME;
            }
          // fall through
          case 263: break;
          case 127:
            { return KEYWORD_CONTINUE;
            }
          // fall through
          case 264: break;
          case 128:
            { return KEYWORD_ERRDEFER;
            }
          // fall through
          case 265: break;
          case 129:
            { return KEYWORD_NOINLINE;
            }
          // fall through
          case 266: break;
          case 130:
            { return KEYWORD_VOLATILE;
            }
          // fall through
          case 267: break;
          case 131:
            { return KEYWORD_ADDRSPACE;
            }
          // fall through
          case 268: break;
          case 132:
            { return KEYWORD_ALLOWZERO;
            }
          // fall through
          case 269: break;
          case 133:
            { return KEYWORD_NOSUSPEND;
            }
          // fall through
          case 270: break;
          case 134:
            { return KEYWORD_LINKSECTION;
            }
          // fall through
          case 271: break;
          case 135:
            { return KEYWORD_THREADLOCAL;
            }
          // fall through
          case 272: break;
          case 136:
            { return KEYWORD_UNREACHABLE;
            }
          // fall through
          case 273: break;
          case 137:
            { return KEYWORD_USINGNAMESPACE;
            }
          // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
