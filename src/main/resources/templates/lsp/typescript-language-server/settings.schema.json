{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "LSP4IJ/typescript-language-server/settings.schema.json",
  "title": "LSP4IJ TypeScript language server settings JSON schema",
  "description": "JSON schema for TypeScript language server settings.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "completions": {
      "type": "object",
      "title": "Completion settings",
      "properties": {
        "completeFunctionCalls": {
          "type": "boolean",
          "default": false,
          "description": "Complete functions with their parameter signature."
        }
      }
    },
    "javascript": {
      "$ref": "#/definitions/languageServerConfiguration"
    },
    "typescript": {
      "$ref": "#/definitions/languageServerConfiguration"
    },
    "javascriptreact": {
      "$ref": "#/definitions/languageServerConfiguration"
    },
    "typescriptreact": {
      "$ref": "#/definitions/languageServerConfiguration"
    }
  },
  "definitions": {
    "languageServerConfiguration": {
      "type": "object",
      "title": "Language server configuration",
      "properties": {
        "format": {
          "type": "object",
          "title": "TypeScript code formatter settings",
          "properties": {
            "baseIndentSize": {
              "type": "number",
              "title": "Base indent size",
              "default": 0
            },
            "convertTabsToSpaces": {
              "type": "boolean",
              "title": "Convert tabs to spaces",
              "default": true
            },
            "indentSize": {
              "type": "number",
              "title": "Indent size",
              "default": 4
            },
            "indentStyle": {
              "type": "string",
              "enum": [
                "None",
                "Block",
                "Smart"
              ],
              "title": "Indent style",
              "default": "Smart"
            },
            "indentSwitchCase": {
              "type": "boolean",
              "title": "Indent switch case",
              "default": true
            },
            "insertSpaceAfterCommaDelimiter": {
              "type": "boolean",
              "title": "Insert space after comma delimiter",
              "default": true
            },
            "insertSpaceAfterConstructor": {
              "type": "boolean",
              "title": "Insert space after constructor",
              "default": false
            },
            "insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
              "type": "boolean",
              "title": "Insert space after function keyword for anonymous functions",
              "default": false
            },
            "insertSpaceAfterKeywordsInControlFlowStatements": {
              "type": "boolean",
              "title": "Insert space after keywords in control flow statements",
              "default": true
            },
            "insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
              "type": "boolean",
              "title": "Insert space after opening and before closing empty braces",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
              "type": "boolean",
              "title": "Insert space after opening and before closing JSX expression braces",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
              "type": "boolean",
              "title": "Insert space after opening and before closing non-empty braces",
              "default": true
            },
            "insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
              "type": "boolean",
              "title": "Insert space after opening and before closing non-empty brackets",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
              "type": "boolean",
              "title": "Insert space after opening and before closing non-empty parenthesis",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
              "type": "boolean",
              "title": "Insert space after opening and before closing template string braces",
              "default": false
            },
            "insertSpaceAfterSemicolonInForStatements": {
              "type": "boolean",
              "title": "Insert space after semicolon in for statements",
              "default": true
            },
            "insertSpaceAfterTypeAssertion": {
              "type": "boolean",
              "title": "Insert space after type assertion",
              "default": false
            },
            "insertSpaceBeforeAndAfterBinaryOperators": {
              "type": "boolean",
              "title": "Insert space before and after binary operators",
              "default": true
            },
            "insertSpaceBeforeFunctionParenthesis": {
              "type": "boolean",
              "title": "Insert space before function parenthesis",
              "default": false
            },
            "insertSpaceBeforeTypeAnnotation": {
              "type": "boolean",
              "title": "Insert space before type annotation",
              "default": true
            },
            "newLineCharacter": {
              "type": "string",
              "title": "Newline character"
            },
            "placeOpenBraceOnNewLineForControlBlocks": {
              "type": "boolean",
              "title": "Place open brace on new line for control blocks",
              "default": false
            },
            "placeOpenBraceOnNewLineForFunctions": {
              "type": "boolean",
              "title": "Place open brace on new line for functions",
              "default": false
            },
            "semicolons": {
              "type": "string",
              "enum": [
                "ignore",
                "insert",
                "remove"
              ],
              "title": "Semicolon policy",
              "default": "ignore"
            },
            "tabSize": {
              "type": "number",
              "title": "Tab size",
              "default": 4
            },
            "trimTrailingWhitespace": {
              "type": "boolean",
              "title": "Trim trailing whitespace",
              "default": true
            }
          }
        },
        "implementationCodeLens": {
          "type": "object",
          "title": "TypeScript implementation code lens settings",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Whether or not implementation code lens is enabled",
              "default": true
            }
          }
        },
        "referencesCodeLens": {
          "type": "object",
          "title": "TypeScript references code lens settings",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Whether or not references code lens is enabled",
              "default": true
            },
            "showOnAllFunctions": {
              "type": "boolean",
              "title": "Whether or not references code lens should be displayed for all functions",
              "default": true
            }
          }
        },
        "inlayHints": {
          "type": "object",
          "title": "TypeScript inlay hints settings",
          "properties": {
            "includeInlayEnumMemberValueHints": {
              "type": "boolean",
              "title": "Include inlay enum member value hints",
              "default": false
            },
            "includeInlayFunctionLikeReturnTypeHints": {
              "type": "boolean",
              "title": "Include inlay function-like return type hints",
              "default": false
            },
            "includeInlayFunctionParameterTypeHints": {
              "type": "boolean",
              "title": "Include inlay function parameter type hints",
              "default": false
            },
            "includeInlayParameterNameHints": {
              "type": "string",
              "enum": [
                "none",
                "literals",
                "all"
              ],
              "title": "Include inlay parameter name hints",
              "default": "none"
            },
            "includeInlayParameterNameHintsWhenArgumentMatchesName": {
              "type": "boolean",
              "title": "Include inlay parameter name hints when argument matches name",
              "default": false
            },
            "includeInlayPropertyDeclarationTypeHints": {
              "type": "boolean",
              "title": "Include inlay property declaration type hints",
              "default": false
            },
            "includeInlayVariableTypeHints": {
              "type": "boolean",
              "title": "Include inlay variable type hints",
              "default": false
            },
            "includeInlayVariableTypeHintsWhenTypeMatchesName": {
              "type": "boolean",
              "title": "Include inlay variable type hints when type matches name",
              "default": false
            }
          }
        },
        "preferences": {
          "type": "object",
          "title": "Language server preferences",
          "properties": {
            "allowIncompleteCompletions": {
              "type": "boolean",
              "title": "Allow incomplete completions",
              "description": "Allows import module names to be resolved in the initial completions request.",
              "default": true
            },
            "allowRenameOfImportPath": {
              "type": "boolean",
              "title": "Allow rename of import path",
              "default": true
            },
            "allowTextChangesInNewFiles": {
              "type": "boolean",
              "title": "Allow text changes in new files",
              "default": true
            },
            "autoImportFileExcludePatterns": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Auto-import file exclude patterns",
              "description": "Glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root.",
              "default": "shortest"
            },
            "disableSuggestions": {
              "type": "boolean",
              "title": "Disable suggestions",
              "default": false
            },
            "displayPartsForJSDoc": {
              "type": "boolean",
              "title": "Display parts for JSDoc",
              "default": true
            },
            "excludeLibrarySymbolsInNavTo": {
              "type": "boolean",
              "title": "Exclude library symbols in nav to",
              "default": true
            },
            "generateReturnInDocTemplate": {
              "type": "boolean",
              "title": "Generate return in doc template",
              "default": true
            },
            "importModuleSpecifier": {
              "type": "string",
              "enum": [
                "shortest",
                "project-relative",
                "relative",
                "non-relative"
              ],
              "title": "Import module specifier",
              "default": "shortest"
            },
            "importModuleSpecifierPreference": {
              "type": "string",
              "enum": [
                "shortest",
                "project-relative",
                "relative",
                "non-relative"
              ],
              "title": "Import module specifier preference",
              "default": "shortest"
            },
            "importModuleSpecifierPreferenceEnding": {
              "type": "string",
              "enum": [
                "auto",
                "minimal",
                "index",
                "js"
              ],
              "title": "Import module specifier ending",
              "default": "auto"
            },
            "includeCompletionsForModuleExports": {
              "type": "boolean",
              "title": "Include completions for module exports",
              "description": "If enabled, TypeScript will search through all external modules' exports and add them to the completions list. This affects lone identifier completions but not completions on the right hand side of obj.",
              "default": true
            },
            "includeCompletionsForImportStatements": {
              "type": "boolean",
              "title": "Include completions for import statements",
              "description": "Enables auto-import-style completions on partially-typed import statements. E.g., allows import write| to be completed to import { writeFile } from 'fs'.",
              "default": true
            },
            "includeCompletionsWithSnippetText": {
              "type": "boolean",
              "title": "Include completions with snippet text",
              "description": "Allows completions to be formatted with snippet text.",
              "default": true
            },
            "includeCompletionsWithInsertText": {
              "type": "boolean",
              "title": "Include completions with insert text",
              "description": "If enabled, the completion list will include completions with invalid identifier names. For those the insertText and replacementSpan properties will be set to change from .x property access to ['x'].",
              "default": true
            },
            "includeAutomaticOptionalChainCompletions": {
              "type": "boolean",
              "title": "Include automatic optional chain completions",
              "description": "Unless this option is false, or includeCompletionsWithInsertText is not enabled, member completion lists triggered with . will include entries on potentially-null and potentially-undefined values, with insertion text to replace preceding . tokens with ?.",
              "default": true
            },
            "includeCompletionsWithClassMemberSnippets": {
              "type": "boolean",
              "title": "Include completions with class member snippets",
              "description": "If enabled, completions for class members (e.g. methods and properties) will include a whole declaration for the member. E.g., class A { f| } could be completed to class A { foo(): number {} }, instead of class A { foo }.",
              "default": true
            },
            "includeCompletionsWithObjectLiteralMethodSnippets": {
              "type": "boolean",
              "title": "Include completions with object literal method snippets",
              "description": "If enabled, object literal methods will have a method declaration completion entry in addition to the regular completion entry containing just the method name. E.g., const objectLiteral: T = { f| } could be completed to const objectLiteral: T = { foo(): void {} }, in addition to const objectLiteral: T = { foo }.",
              "default": true
            },
            "includeInlayEnumMemberValueHints": {
              "type": "boolean",
              "title": "Include inlay enum member value hints",
              "default": false
            },
            "includeInlayFunctionLikeReturnTypeHints": {
              "type": "boolean",
              "title": "Include inlay function-like return type hints",
              "default": false
            },
            "includeInlayFunctionParameterTypeHints": {
              "type": "boolean",
              "title": "Include inlay function parameter type hints",
              "default": false
            },
            "includeInlayParameterNameHints": {
              "type": "string",
              "enum": [
                "none",
                "literals",
                "all"
              ],
              "title": "Include inlay parameter name hints",
              "default": "none"
            },
            "includeInlayParameterNameHintsWhenArgumentMatchesName": {
              "type": "boolean",
              "title": "Include inlay parameter name hints when argument matches name",
              "default": false
            },
            "includeInlayPropertyDeclarationTypeHints": {
              "type": "boolean",
              "title": "Include inlay property declaration type hints",
              "default": false
            },
            "includeInlayVariableTypeHints": {
              "type": "boolean",
              "title": "Include inlay variable type hints",
              "default": false
            },
            "includeInlayVariableTypeHintsWhenTypeMatchesName": {
              "type": "boolean",
              "title": "Include inlay variable type hints when type matches name",
              "default": false
            },
            "includePackageJsonAutoImports": {
              "type": "string",
              "enum": [
                "auto",
                "on",
                "off"
              ],
              "title": "Include package.json auto-imports",
              "default": "auto"
            },
            "interactiveInlayHints": {
              "type": "boolean",
              "title": "Interactive inlay hints",
              "default": true
            },
            "jsxAttributeCompletionStyle": {
              "type": "string",
              "enum": [
                "auto",
                "braces",
                "non"
              ],
              "title": "JSX attribute completion style",
              "default": "auto"
            },
            "lazyConfiguredProjectsFromExternalProject": {
              "type": "boolean",
              "title": "Lazy-configured projects from external project",
              "default": false
            },
            "organizeImportsIgnoreCase": {
              "type": "object",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ]
                }
              ],
              "title": "Organize imports ignore case",
              "description": "Indicates whether imports should be organized in a case-insensitive manner.",
              "default": "auto"
            },
            "organizeImportsCollation": {
              "type": "string",
              "enum": [
                "ordinal",
                "unicode"
              ],
              "title": "Organize imports collation",
              "description": "Indicates whether imports should be organized via an 'ordinal' (binary) comparison using the numeric value of their code points, or via 'unicode' collation (via the Unicode Collation Algorithm) using rules associated with the locale specified in organizeImportsCollationLocale.",
              "default": "ordinal"
            },
            "organizeImportsCollationLocale": {
              "type": "string",
              "title": "Organize imports collation locale",
              "description": "Indicates the locale to use for 'unicode' collation. If not specified, the locale 'en' is used as an invariant for the sake of consistent sorting. Use 'auto' to use the detected UI locale. This preference is ignored if organizeImportsCollation is not 'unicode'.",
              "default": "en"
            },
            "organizeImportsNumericCollation": {
              "type": "boolean",
              "title": "Organize imports numeric collation",
              "description": "Indicates whether numeric collation should be used for digit sequences in strings. When true, will collate strings such that a1z < a2z < a100z. When false, will collate strings such that a1z < a100z < a2z. This preference is ignored if organizeImportsCollation is not 'unicode'.",
              "default": false
            },
            "organizeImportsAccentCollation": {
              "type": "boolean",
              "title": "Organize imports accent collation",
              "description": "Indicates whether accents and other diacritic marks are considered unequal for the purpose of collation. When true, characters with accents and other diacritics will be collated in the order defined by the locale specified in organizeImportsCollationLocale. This preference is ignored if organizeImportsCollation is not 'unicode'.",
              "default": true
            },
            "organizeImportsCaseFirst": {
              "type": "object",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "upper",
                    "lower"
                  ]
                }
              ],
              "title": "Organize imports case first",
              "description": "Indicates whether upper case or lower case should sort first. When false, the default order for the locale specified in organizeImportsCollationLocale is used. This preference is ignored if organizeImportsCollation is not 'unicode'. This preference is also ignored if we are using case-insensitive sorting, which occurs when organizeImportsIgnoreCase is true, or if organizeImportsIgnoreCase is 'auto' and the auto-detected case sensitivity is determined to be case-insensitive.",
              "default": false
            },
            "providePrefixAndSuffixTextForRename": {
              "type": "boolean",
              "title": "Provide prefix and suffix text for rename",
              "default": true
            },
            "provideRefactorNotApplicableReason": {
              "type": "boolean",
              "title": "Provide refactor not-applicable reason",
              "default": true
            },
            "quotePreference": {
              "type": "string",
              "enum": [
                "auto",
                "double",
                "single"
              ],
              "title": "Quote preference",
              "default": "auto"
            },
            "useLabelDetailsInCompletionEntries": {
              "type": "boolean",
              "title": "Use label details in completion entries",
              "description": "Indicates whether CompletionEntry.labelDetails completion entry label details are supported. If not, contents of labelDetails may be included in the CompletionEntry.name property. Only supported if the client supports textDocument.completion.completionItem.labelDetailsSupport capability and a compatible TypeScript version is used.",
              "default": true
            }
          }
        }
      }
    }
  }
}